swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: dwarkeshpatel.siliconithub@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /car_master/{id}:
    get:
      tags:
      - car_demo/controllersCar_masterController
      description: |-
        get Car_master by id
        <br>
      operationId: Car_masterController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Car_master'
        "403":
          description: :id is empty
    put:
      tags:
      - car_demo/controllersCar_masterController
      description: |-
        update the Car_master
        <br>
      operationId: Car_masterController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Car_master content
        required: true
        schema:
          $ref: '#/definitions/models.Car_master'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Car_master'
        "403":
          description: :id is not int
    delete:
      tags:
      - car_demo/controllersCar_masterController
      description: |-
        delete the Car_master
        <br>
      operationId: Car_masterController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /car_master/create:
    post:
      tags:
      - car_demo/controllersCar_masterController
      description: |-
        create Car_master
        <br>
      operationId: Car_masterController.Post
      parameters:
      - in: formData
        name: car_name
        description: body for Car_master content
        required: true
        type: string
      - in: formData
        name: car_type
        description: body for Car_master content
        required: true
        type: string
      - in: formData
        name: make
        description: body for Car_master content
        required: true
        type: string
      - in: formData
        name: model
        description: body for Car_master content
        required: true
        type: string
      - in: formData
        name: ufile
        description: File to upload
        required: true
        type: file
      - in: header
        name: Authorization
        description: Bearer YourAccessToken
        required: true
        type: string
      responses:
        "201":
          description: '{int} models.Car_master'
        "403":
          description: body is empty
  /car_master/getall:
    get:
      tags:
      - car_demo/controllersCar_masterController
      description: |-
        get Car_master
        <br>
      operationId: Car_masterController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Car_master'
        "403":
          description: ""
  /users/{id}:
    put:
      tags:
      - car_demo/controllersUsersController
      description: |-
        update the Users
        <br>
      operationId: UsersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateRequest'
      responses:
        "200":
          description: ""
          schema:
            type: string
        "400":
          description: ""
        "403":
          description: :id is not int
    delete:
      tags:
      - car_demo/controllersUsersController
      description: |-
        delete the Users
        <br>
      operationId: UsersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "400":
          description: ""
        "403":
          description: id is empty
  /users/forgot_password:
    post:
      tags:
      - car_demo/controllersUsersController
      description: |-
        Forgot Password
        <br>
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/request.ForgotPassword'
      responses:
        "200":
          description: '{int} string'
        "400":
          description: ""
        "403":
          description: body is empty
  /users/getall:
    get:
      tags:
      - car_demo/controllersUsersController
      description: |-
        get Users
        <br>
      operationId: UsersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: ""
        "403":
          description: ""
  /users/getone/{id}:
    get:
      tags:
      - car_demo/controllersUsersController
      description: |-
        get Users by id
        <br>
      operationId: UsersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is empty
  /users/login:
    post:
      tags:
      - car_demo/controllersUsersController
      description: |-
        Login User
        <br>
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      responses:
        "200":
          description: '{int} map[string]interface{}'
        "400":
          description: ""
        "403":
          description: body is empty
  /users/register:
    post:
      tags:
      - car_demo/controllersUsersController
      description: |-
        create Users
        <br>
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      responses:
        "201":
          description: '{int} models.Users'
        "403":
          description: body is empty
  /users/sendotp:
    post:
      tags:
      - car_demo/controllersUsersController
      description: |-
        Send Otp
        <br>
      operationId: UsersController.SendOTP
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/request.SendOTP'
      responses:
        "200":
          description: '{int} string'
        "400":
          description: ""
        "403":
          description: body is empty
  /users/verifyotp:
    post:
      tags:
      - car_demo/controllersUsersController
      description: |-
        Verify OTP
        <br>
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/request.VerifyOTP'
      responses:
        "200":
          description: '{int} string'
        "400":
          description: ""
        "403":
          description: body is empty
definitions:
  OTPData:
    title: OTPData
    type: object
  VerifyData:
    title: VerifyData
    type: object
  models.Car_master:
    title: Car_master
    type: object
    properties:
      CreatedAt:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      UpdatedAt:
        type: integer
        format: int64
      car_image:
        type: string
      car_name:
        type: string
      car_type:
        $ref: '#/definitions/models.CarType'
      make:
        type: string
      model:
        type: string
      user_id:
        type: integer
        format: int64
  models.CarType:
    title: CarType
    type: string
    enum:
    - Sedan = "sedan"
    - Hatchback = "hatchback"
    - SUV = "SUV"
    example: sedan
  models.Users:
    title: Users
    type: object
    properties:
      CreatedAt:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      UpdatedAt:
        type: integer
        format: int64
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      mobile:
        type: string
      otp:
        type: string
      password:
        type: string
      role:
        type: string
      status:
        type: integer
        format: int64
  request.CreateUserRequest:
    title: CreateUserRequest
    type: object
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      mobile:
        type: string
      password:
        type: string
      role:
        type: string
  request.ForgotPassword:
    title: ForgotPassword
    type: object
    properties:
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
  request.SendOTP:
    title: SendOTP
    type: object
    properties:
      email:
        type: string
  request.UserLoginRequest:
    title: UserLoginRequest
    type: object
    properties:
      email:
        type: string
      mobile:
        type: string
      password:
        type: string
  request.UserUpdateRequest:
    title: UserUpdateRequest
    type: object
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
        format: int64
      last_name:
        type: string
      mobile:
        type: string
      password:
        type: string
      role:
        type: string
  request.VerifyOTP:
    title: VerifyOTP
    type: object
    properties:
      email:
        type: string
      otp:
        type: string
tags:
- name: car_demo/controllersUsersController
  description: |
    UsersController operations for Users
- name: car_demo/controllersCar_masterController
  description: |
    Car_masterController operations for Car_master
